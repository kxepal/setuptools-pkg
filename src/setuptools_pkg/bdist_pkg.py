# -*- coding: utf-8 -*-
#
# Copyright (C) 2016 Alexander Shorin
# All rights reserved.
#
# This software is licensed as described in the file LICENSE, which
# you should have received as part of this distribution.
#

import os
import platform

from setuptools import Command

__all__ = (
    'bdist_pkg',
)


class bdist_pkg(Command):
    description = 'create FreeBSD pkg distribution'

    user_options = [
        ('bdist-base=', 'b',
         'base directory for creating built distributions'),
        ('dist-dir=', 'd',
         'directory to put distribute files in'),
    ]

    def initialize_options(self):
        self.bdist_base = None
        self.dist_dir = None
        self.initialize_manifest_options()

    def initialize_manifest_options(self):
        # TODO: What is it and how to use it?
        # self.annotations = None

        # Technically, abi and arch can be autogenerated, but assume we build
        # PKG on else system than FreeBSD - we have to specify them manually.
        self.abi = None
        self.arch = None

        # Categories maps to keywords.
        self.categories = None

        # TODO: Could conflicts be useful for us?
        # self.conflicts = None

        # Comment is a one-line description of this package.
        # Like description.
        self.comment = None

        # TODO: What is it and how to use it?
        # self.dep_formula = None

        # TODO: Need autogenerate deps from install requirements
        # self.deps = None

        # A longer description of the package.
        # Like long_description.
        self.desc = None

        # These fields are autogenerated:
        # self.directories = None
        # self.dirs = None
        # self.files = None
        # self.flatsize = None

        # TODO: Do we need in groups definition?
        # self.groups = None

        # We pick license from distribution metadata, so these two fields
        # we'll fill later.
        # self.licenselogic = None
        # self.licenses = None
        self.license = None

        # The maintainer's mail	address.
        # Python distributions defines both maintainer and author entities
        # who rules the package.
        self.maintainer = None

        # TODO: should that be single message or multiple ones?
        # self.messages = None

        # Package name. Since FreeBSD packages often uses own naming policy,
        # the custom name can be used instead of real project one.
        self.name = None

        # TODO: Fill the options from extras.
        # self.options = None
        # self.options_defaults = None
        # self.options_descriptions = None

        # By default we set it generic lang/python while in most cases users
        # will have to override it depending on project goals and own needs.
        self.origin = None

        # TODO: What is the path?
        # self.path = None

        # The path where the files contained in	this package are installed
        # (usually /usr/local).
        self.prefix = None

        # TODO: How can we use the following fields?
        # self.provides = None
        # self.requires = None

        # TODO: Add scripts support.
        # self.scripts = None

        # TODO: Do we need shared libs support?
        # self.shlibs = None
        # self.shlibs_provides = None
        # self.shlibs_requires = None

        # TODO: Support checksum.
        # self.sum = None

        # TODO: Do we need to specify users?
        # self.users = None

        # Package version. As like package name, can be different from real
        # project version, depending on local modifications, patches etc.
        self.version = None

        # TODO: Can Python packages be vital?
        # self.vital = None

        # Project URL.
        self.www = None

    def finalize_options(self):
        self.set_undefined_options('bdist', ('bdist_base', 'bdist_base'))
        self.set_undefined_options('bdist', ('dist_dir', 'dist_dir'))
        self.bdist_dir = os.path.join(self.bdist_base, 'pkg')
        self.install_dir = os.path.join(self.bdist_dir, 'root')
        self.finalize_manifest_options()

    def finalize_manifest_options(self):
        project = self.distribution
        self.ensure_string('abi', self.get_abi())
        self.ensure_string('arch', self.get_arch())
        self.ensure_string('categories', project.get_keywords())
        self.ensure_string('comment', project.get_description())
        self.ensure_string('desc', project.get_long_description())
        self.ensure_string('license', self.resolve_license(project))
        self.ensure_string('maintainer', self.get_maintainer(project))
        self.ensure_string('name', project.get_name())
        self.ensure_string('origin', 'devel/py-' + project.get_name())
        self.ensure_string('prefix', '/usr/local')
        self.ensure_string('version', project.get_version())
        self.ensure_string('www', project.get_url())

    def run(self):
        self.build_and_install()

    def build_and_install(self):
        # Basically, we need the intermediate results of bdist_dumb,
        # but since it's too monolithic and does the stuff that we would like
        # to avoid, here short copy-paste happens /:
        self.run_command('build')
        install = self.reinitialize_command('install', reinit_subcommands=1)
        install.prefix = self.prefix
        install.root = self.install_dir
        install.warn_dir = 0
        self.run_command('install')

    def get_abi(self):
        system = platform.system()
        if system.lower() != 'freebsd':
            self.warn('Unable to determine default ABI value'
                      ' since bdist_pkg call happens not on FreeBSD system.'
                      ' Fallback to * value.')
            return '*'
        return ':'.join((
            platform.system(),
            # 10.1-STABLE-r273058 -> 10
            platform.release().split('-', 1)[0].split('.')[0],
            # TODO: ensure that platform.machine() gives correct values
            platform.machine()
        ))

    def get_arch(self):
        if platform.system().lower() != 'freebsd':
            self.warn('Unable to determine default ARCH value'
                      ' since bdist_pkg call happens not on FreeBSD system.'
                      ' Fallback to * value.')
            return '*'
        return ':'.join((
            platform.system(),
            # 10.1-STABLE-r273058 -> 10
            platform.release().split('-', 1)[0].split('.')[0],
            # TODO: shouldn't there be a better way?
            'x86:64' if platform.machine() == 'amd64' else 'x86:32'
        ))

    def get_maintainer(self, project):
        maintainer = '{} <{}>'.format(project.get_maintainer(),
                                      project.get_maintainer_email())
        if maintainer == 'UNKNOWN <UNKNOWN>':
            # No explicit maintainer specified, use author contact instead
            maintainer = '{} <{}>'.format(project.get_author(),
                                          project.get_author_email())
        return maintainer

    def resolve_license(self, project):
        # Thanks for this mapping goes to pytoport project
        py2freebsd_mapping = {
            'agpl-3.0': 'AGPLv3',
            'apache-2.0': 'APACHE20',
            'artistic-2.0': 'ART20',
            'bsd-2-clause': 'BSD2CLAUSE',
            'bsd-3-clause-clear': 'BSD3CLAUSE',
            'bsd-3-clause': 'BSD3CLAUSE',
            'cc0-1.0': 'CC0-1.0',
            'epl-1.0': 'EPL',
            'gpl-2.0': 'GPLv2',
            'gpl-3.0': 'GPLv3',
            'isc': 'ISCL',
            'lgpl-2.1': 'LGPL21',
            'lgpl-3.0': 'LGPL3',
            'mit': 'MIT',
            'mpl-2.0': 'MPL',
            'ofl-1.1': 'OFL11',
        }
        license = project.get_license()
        pkg_license = py2freebsd_mapping.get(license.lower())
        if license != 'UNKNOWN' and pkg_license is None:
            self.warn('Unable to convert license %s to PKG naming' % license)
            return license
        return pkg_license
